package com.kaurihealth.mvplib.home_p;

import com.kaurihealth.datalib.repository.IDataSource;
import com.kaurihealth.datalib.response_bean.DoctorRelationshipBean;
import com.kaurihealth.datalib.response_bean.ResponseDisplayBean;

import java.util.List;

import javax.inject.Inject;

import rx.Observable;
import rx.Subscriber;
import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Action1;
import rx.functions.Func1;
import rx.schedulers.Schedulers;
import rx.subscriptions.CompositeSubscription;

/**
 * Created by  jianghw on 2016/9/19.
 * <p/>
 * Describe:
 */
public class DoctorRequestPresenter<V> implements IDoctorRequestPresenter<V> {
    private final IDataSource mRepository;
    private CompositeSubscription mSubscriptions;
    private IDoctorRequestView mActivity;
    private boolean mFirstLoad = true;

    @Inject
    public DoctorRequestPresenter(IDataSource mRepository) {
        this.mRepository = mRepository;
        mSubscriptions = new CompositeSubscription();
    }

    @Override
    public void setPresenter(V view) {
        mActivity = (IDoctorRequestView) view;
    }

    @Override
    public void onSubscribe() {
        if (mFirstLoad) loadDoctorDetail(false);
    }

    /**
     * 查询挂起的医生关系。 医生使用的token
     */
    @Override
    public void loadDoctorDetail(boolean b) {
        Subscription subscription = mRepository.LoadPendingDoctorRelationships()
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> mActivity.loadingIndicator(true))
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<List<DoctorRelationshipBean>>() {
                    @Override
                    public void onCompleted() {
                        mFirstLoad = false;
                        mActivity.loadingIndicator(false);
                    }

                    @Override
                    public void onError(Throwable e) {
                        mActivity.loadingIndicator(false);
                        mActivity.showToast(e.getMessage());
                    }

                    @Override
                    public void onNext(List<DoctorRelationshipBean> doctorRelationshipBean) {
                        mActivity.getRequestResult(doctorRelationshipBean);
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    public void acceptDoctorRelationship(int relationshipId) {
        Subscription subscription = mRepository.AcceptDoctorRelationship(String.valueOf(relationshipId))
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> {
                    mActivity.dataInteractionDialog();  //正在加载中...
                })
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<ResponseDisplayBean>() {
                    @Override
                    public void onCompleted() {
                        mActivity.dismissInteractionDialog();
                    }

                    @Override
                    public void onError(Throwable e) {
                        mActivity.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(ResponseDisplayBean bean) {
                        if (bean.isIsSucess()) {
                            mActivity.acceptDoctorRelationSuccess(bean);
                            mActivity.showToast("已同意对方请求");
                        } else {
                            mActivity.displayErrorDialog(bean.getMessage());
                        }
                    }
                });
        mSubscriptions.add(subscription);
    }

    //拒绝医生关系
    public void rejectDoctorRelationship(int relationshipId) {
        Subscription subscription = mRepository.RejectDoctorRelationship(String.valueOf(relationshipId))
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> {
                    mActivity.dataInteractionDialog();  //正在加载中...
                })
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<ResponseDisplayBean>() {
                    @Override
                    public void onCompleted() {
                        mActivity.dismissInteractionDialog();
                    }

                    @Override
                    public void onError(Throwable e) {
                        mActivity.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(ResponseDisplayBean bean) {
                        if (bean.isIsSucess()) {
                            mActivity.rejectDoctorRelationSuccess(bean);
                            mActivity.showToast("已拒绝对方请求");
                        } else {
                            mActivity.displayErrorDialog(bean.getMessage());
                        }
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    public void manualSearch(CharSequence text, List<DoctorRelationshipBean> list) {
        Subscription subscription = Observable.from(list)
                .filter(new Func1<DoctorRelationshipBean, Boolean>() {
                    @Override
                    public Boolean call(DoctorRelationshipBean bean) {
                        return null != bean;
                    }
                })
                .filter(new Func1<DoctorRelationshipBean, Boolean>() {
                    @Override
                    public Boolean call(DoctorRelationshipBean relationshipBean) {
                        return relationshipBean.getRelatedDoctor()!=null;
                    }
                })
                .filter(new Func1<DoctorRelationshipBean, Boolean>() {
                    @Override
                    public Boolean call(DoctorRelationshipBean bean) {
                        return bean.getRelatedDoctor().getFullName().contains(text);
                    }
                })
                .toList()
                .subscribeOn(Schedulers.computation())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<List<DoctorRelationshipBean>>() {
                    @Override
                    public void call(List<DoctorRelationshipBean> beanList) {
                        mActivity.manualSearchSucceed(beanList);
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                        mActivity.showToast(throwable.getMessage());
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    public void removeNonAccepted() {
        Subscription subscription = mRepository.removeNonAcceptedDoctorRelationships()
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> {
                    mActivity.dataInteractionDialog();  //正在加载中...
                })
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<ResponseDisplayBean>() {
                    @Override
                    public void onCompleted() {
                        mActivity.dismissInteractionDialog();
                    }

                    @Override
                    public void onError(Throwable e) {
                        mActivity.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(ResponseDisplayBean bean) {
                        if (bean.isIsSucess()) {
                            mActivity.removeNonAcceptedSuccess(bean);
                            mActivity.showToast("清除成功");
                        } else {
                            mActivity.displayErrorDialog(bean.getMessage());
                        }
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    public void unSubscribe() {
        if (mActivity != null) mActivity.loadingIndicator(false);
        mSubscriptions.clear();
        mActivity = null;
    }
}
