package com.kaurihealth.mvplib.doctor_new;

import com.kaurihealth.datalib.repository.Repository;
import com.kaurihealth.datalib.request_bean.bean.InitialiseSearchRequestBean;
import com.kaurihealth.datalib.request_bean.bean.SearchBooleanResultBean;
import com.kaurihealth.datalib.request_bean.builder.SearchBooleanResultBeanBuilder;
import com.kaurihealth.datalib.response_bean.DoctorDisplayBean;
import com.kaurihealth.datalib.response_bean.DoctorRelationshipBean;
import com.kaurihealth.datalib.response_bean.SearchErrorsBean;
import com.kaurihealth.datalib.response_bean.SearchResultBean;

import java.util.List;

import javax.inject.Inject;

import rx.Observable;
import rx.Subscriber;
import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Action1;
import rx.functions.Func1;
import rx.schedulers.Schedulers;
import rx.subscriptions.CompositeSubscription;

/**
 * Created by mip on 2016/12/15.
 */

public class DoctorSearchPresenter<V> implements IDoctorSearchPresenter<V> {
    private final Repository mRepository;
    private CompositeSubscription mSubscriptions;
    private IDoctorSearchView mActivity;

    @Inject
    public DoctorSearchPresenter(Repository mRepository) {
        this.mRepository = mRepository;
        mSubscriptions = new CompositeSubscription();
    }

    @Override
    public void setPresenter(V view) {
        mActivity = (IDoctorSearchView) view;
    }

    /**
     * 默认查询
     * 1、有错误时
     * 2、查询到数据时
     * 3、查询不到数据时
     */
    @Override
    public void onSubscribe() {
        InitialiseSearchRequestBean currentSearchRequestBean = mActivity.getCurrentSearchRequestBean();
        Subscription subscription = mRepository.KeywordSearch(currentSearchRequestBean)
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> mActivity.dataInteractionDialog())  //正在加载中...
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        new Action1<SearchResultBean>() {
                            @Override
                            public void call(SearchResultBean searchResultBean) {
                                if (searchResultBean.getErrors() != null && searchResultBean.getErrors().size() > 0) {
                                    StringBuilder stringBuilder = new StringBuilder();
                                    for (SearchErrorsBean errorsBean : searchResultBean.getErrors()) {
                                        stringBuilder.append(errorsBean.getMessage());
                                    }
                                    mActivity.displayErrorDialog(stringBuilder.toString());
                                } else if (searchResultBean.getResult() != null && searchResultBean.getResult().getNum() > 0) {
                                    loadDoctorRelationships(searchResultBean.getResult().getItems());
                                } else {
                                    mActivity.updataDataSucceed(null);
                                    mActivity.dismissInteractionDialog();
                                }
                            }
                        },
                        new Action1<Throwable>() {
                            @Override
                            public void call(Throwable throwable) {
                                mActivity.displayErrorDialog(throwable.getMessage());
                            }
                        });
        mSubscriptions.add(subscription);
    }


    /**
     * 查询用户医生关系的病例（不包含拒绝的） 医生使用的token
     */
    public void loadDoctorRelationships(List<SearchResultBean.ResultBean.ItemsBean> items) {
        Subscription subscription = mRepository.LoadDoctorRelationships()
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        new Action1<List<DoctorRelationshipBean>>() {
                            @Override
                            public void call(List<DoctorRelationshipBean> doctorRelationshipBeen) {
                                handleDoctorRelationship(doctorRelationshipBeen, items);
                            }
                        },
                        new Action1<Throwable>() {
                            @Override
                            public void call(Throwable throwable) {
                                mActivity.displayErrorDialog(throwable.getMessage());
                            }
                        });
        mSubscriptions.add(subscription);
    }

    /**
     * 1、取医生id
     * 2、转list --关系列表id集合
     * 3、重发ItemsBean
     * 4、转SearchBooleanResultBean
     */
    public void handleDoctorRelationship(List<DoctorRelationshipBean> been, List<SearchResultBean.ResultBean.ItemsBean> items) {
        Subscription subscription = Observable.from(been)
                .subscribeOn(Schedulers.computation())
                .map(new Func1<DoctorRelationshipBean, Integer>() {
                    @Override
                    public Integer call(DoctorRelationshipBean bean) {
                        return bean.getRelatedDoctor().getDoctorId();
                    }
                })
                .toList()
                .flatMap(new Func1<List<Integer>, Observable<SearchBooleanResultBean>>() {
                    @Override
                    public Observable<SearchBooleanResultBean> call(List<Integer> integers) {
                        return Observable
                                .from(items)
                                .map(new Func1<SearchResultBean.ResultBean.ItemsBean, SearchBooleanResultBean>() {
                                    @Override
                                    public SearchBooleanResultBean call(SearchResultBean.ResultBean.ItemsBean bean) {
                                        return new SearchBooleanResultBeanBuilder().Build(integers.contains(bean.getDoctorId()), bean);
                                    }
                                });
                    }
                })
                .toList()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<List<SearchBooleanResultBean>>() {
                    @Override
                    public void onCompleted() {
                        mActivity.dismissInteractionDialog();
                    }

                    @Override
                    public void onError(Throwable throwable) {
                        mActivity.displayErrorDialog(throwable.getMessage());
                    }

                    @Override
                    public void onNext(List<SearchBooleanResultBean> been) {
                        mActivity.updataDataSucceed(been);
                    }
                });
        mSubscriptions.add(subscription);
    }

    /***
     * 查询doctor信息
     ***/
    public void LoadDoctorDetailByDoctorId() {//通过id查询医生信息
        Subscription subscription = mRepository.LoadDoctorDetailByDoctorId(mActivity.getDoctorId())
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> mActivity.dataInteractionDialog())
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<DoctorDisplayBean>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {
                        mActivity.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(DoctorDisplayBean bean) {
                        priorityData(bean);
                    }
                });
        mSubscriptions.add(subscription);
    }

    /**
     * 过滤
     */
    private void priorityData(DoctorDisplayBean bean) {
        //查询所有用户医生关系的病例（包含拒绝的） 医生使用的token
        Subscription subscription = mRepository.loadAllDoctorRelationships()
                .subscribeOn(Schedulers.io())
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<List<DoctorRelationshipBean>>() {
                    @Override
                    public void onCompleted() {
                    }

                    @Override
                    public void onError(Throwable e) {
                        mActivity.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(List<DoctorRelationshipBean> beanList) {
                        //将同意和自己成为协作医生的doctor过滤出来
                        priorityDataArrangement(beanList, bean);
                    }
                });
        mSubscriptions.add(subscription);
    }

    /**
     * 过滤
     *
     * @param list
     */
    private void priorityDataArrangement(List<DoctorRelationshipBean> list, DoctorDisplayBean displayBean) {
        if (list.isEmpty()) priorityNotReceptDataArrangement(displayBean);
        if (list.isEmpty()) return;
        Subscription subscription = Observable.from(list)
                .subscribeOn(Schedulers.computation())
                .filter(doctorRelationshipBean -> doctorRelationshipBean.getStatus().equals("接受"))
                .toList()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        doctorRelationshipBeen -> {
                            boolean isHasDate = true;
                            for (DoctorRelationshipBean bean : doctorRelationshipBeen) {
                                if (bean.getRelatedDoctor().getDoctorId() == mActivity.getDoctorId()) {
                                    mActivity.getResult(bean, true);//将匹配到的数据发回
                                    isHasDate = false;
                                }
                            }
                            //判断是否有自己的协作医生，若没有则發送未接受的
                            if (!isHasDate) mActivity.dismissInteractionDialog();
                            if (isHasDate) priorityNotReceptDataArrangement(displayBean);
                        },
                        new Action1<Throwable>() {
                            @Override
                            public void call(Throwable throwable) {
                                mActivity.displayErrorDialog(throwable.getMessage());
                            }
                        });
        mSubscriptions.add(subscription);
    }

    /**
     * 包装不是自己的协作医生
     */
    private void priorityNotReceptDataArrangement(DoctorDisplayBean bean) {
        DoctorRelationshipBean doctorRelationshipBean = new DoctorRelationshipBean();
        doctorRelationshipBean.setRelatedDoctor(bean);
        mActivity.dismissInteractionDialog();
        mActivity.getResult(doctorRelationshipBean, false);
    }

    @Override
    public void unSubscribe() {
        if (mActivity != null) mActivity.dismissInteractionDialog();
        mSubscriptions.clear();
        mActivity = null;
    }
}
