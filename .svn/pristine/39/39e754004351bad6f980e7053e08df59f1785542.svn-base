package com.kaurihealth.kaurihealth.home_v.request;

import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.kaurihealth.datalib.response_bean.DoctorRelationshipBean;
import com.kaurihealth.datalib.response_bean.ResponseDisplayBean;
import com.kaurihealth.kaurihealth.R;
import com.kaurihealth.kaurihealth.adapter.DoctorRequestAdapter;
import com.kaurihealth.kaurihealth.base_v.BaseActivity;
import com.kaurihealth.kaurihealth.tinker.SampleApplicationLike;
import com.kaurihealth.mvplib.home_p.DoctorRequestPresenter;
import com.kaurihealth.mvplib.home_p.IDoctorRequestView;
import com.kaurihealth.utilslib.ColorUtils;
import com.kaurihealth.utilslib.constant.Global;
import com.kaurihealth.utilslib.widget.MaterialSearchBar;
import com.kaurihealth.utilslib.widget.ScrollChildSwipeRefreshLayout;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import butterknife.Bind;

/**
 * Created by mip on 2016/9/19.
 * <p/>
 * 描述：新医生
 */
public class DoctorRequestActivity extends BaseActivity implements IDoctorRequestView,
        DoctorRequestAdapter.ItemClickBack, MaterialSearchBar.OnSearchActionListener, View.OnClickListener, PopupWindow.OnDismissListener {
    @Inject
    DoctorRequestPresenter<IDoctorRequestView> mPresenter;

    @Bind(R.id.iv_back)
    ImageView mIvBack;
    @Bind(R.id.tv_title)
    TextView mTvTitle;
    @Bind(R.id.tv_more)
    TextView mTvMore;
    @Bind(R.id.searchBar)
    MaterialSearchBar mSearchBar;
    @Bind(R.id.lv_content)
    ListView mLvContent;
    @Bind(R.id.swipe_refresh)
    ScrollChildSwipeRefreshLayout mSwipeRefresh;
    @Bind(R.id.tv_tips)
    TextView mTvTips;

    private DoctorRequestAdapter adapter;
    private List<DoctorRelationshipBean> mBeanList = new ArrayList<>();
    private List<DoctorRelationshipBean> mSearchList;
    private PopupWindow popupWindow;
    @Override
    protected int getActivityLayoutID() {
        return R.layout.doctor_request;
    }

    @Override
    protected void initPresenterAndView(Bundle savedInstanceState) {
        SampleApplicationLike.getApp().getComponent().inject(this);
        mPresenter.setPresenter(this);

        initNewBackBtn("新医生");
        mTvMore.setText("清除");

        adapter = new DoctorRequestAdapter(this, mBeanList);
        adapter.setOnItemClickListener(this);
        mLvContent.setAdapter(adapter);

        mSwipeRefresh.setSize(SwipeRefreshLayout.DEFAULT);
        mSwipeRefresh.setColorSchemeColors(
                ColorUtils.setSwipeRefreshColors(getApplicationContext())
        );
        mSwipeRefresh.setDistanceToTriggerSync(Global.Numerical.SWIPE_REFRESH);
        mSwipeRefresh.setScrollUpChild(mLvContent);
        mSwipeRefresh.setOnRefreshListener(() -> mPresenter.loadDoctorDetail(true));

        mSearchBar.setOnSearchActionListener(this);
    }

    @Override
    protected void initDelayedData() {
        mPresenter.onSubscribe();

        mLvContent.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                DoctorRelationshipBean bean = mBeanList.get(position);

                Bundle bundle = new Bundle();
                bundle.putParcelable(Global.Bundle.FRIEND_DOCTOR, bean);
                skipToBundle(DoctorRequestInfoActivity.class, bundle);
            }
        });

        mTvMore.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openPopupWindow(v);
            }
        });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (!mBeanList.isEmpty()) mBeanList.clear();
        if (mSearchList != null) mSearchList.clear();
        mPresenter.unSubscribe();
    }

    @Override
    public void switchPageUI(String className) {
//TODO
    }

    @Override
    public void loadingIndicator(boolean flag) {
        if (mSwipeRefresh == null) return;
        mSwipeRefresh.post(() -> mSwipeRefresh.setRefreshing(flag));
    }

    /**
     * 得到所有挂起的医生关系
     */
    @Override
    public void getRequestResult(List<DoctorRelationshipBean> beanList) {
        mTvTips.setVisibility(beanList != null ? !beanList.isEmpty() ? View.GONE : View.VISIBLE : View.VISIBLE);
        if (!mBeanList.isEmpty()) mBeanList.clear();
        if (beanList != null) mBeanList.addAll(beanList);
        adapter.notifyDataSetChanged();
    }

    @Override
    public void onItemAcceptClick(int id) {
        mPresenter.acceptDoctorRelationship(id);
    }

    @Override
    public void onItemRefuseClick(int id) {
        mPresenter.rejectDoctorRelationship(id);
    }

    @Override
    public void acceptDoctorRelationSuccess(ResponseDisplayBean bean) {
        mPresenter.loadDoctorDetail(true);
    }

    @Override
    public void rejectDoctorRelationSuccess(ResponseDisplayBean bean) {
        mPresenter.loadDoctorDetail(true);
    }

    @Override
    public void onSearchStart() {
        mSwipeRefresh.setEnabled(false);

        if (mSearchList == null) {
            mSearchList = new ArrayList<>();
        } else {
            mSearchList.clear();
        }
        mSearchList.addAll(mBeanList);
    }

    @Override
    public void onSearchConfirmed(CharSequence text) {
        mPresenter.manualSearch(text, mBeanList);
    }

    @Override
    public void manualSearchSucceed(List<DoctorRelationshipBean> list) {
        mTvTips.setVisibility(list == null || list.isEmpty() ? View.VISIBLE : View.GONE);

        if (!mBeanList.isEmpty()) mBeanList.clear();
        if (list != null) mBeanList.addAll(list);
        adapter.notifyDataSetChanged();
    }

    @Override
    public void removeNonAcceptedSuccess(ResponseDisplayBean bean) {
        mPresenter.loadDoctorDetail(true);
    }

    @Override
    public void onSearchCompleteBack() {
        mSwipeRefresh.setEnabled(true);

        if (!mBeanList.isEmpty()) mBeanList.clear();
        mBeanList.addAll(mSearchList);
        mTvTips.setVisibility(mBeanList == null || mBeanList.isEmpty() ? View.VISIBLE : View.GONE);
        adapter.notifyDataSetChanged();
    }


    /**
     * 删除键回调
     */
    @Override
    public void onSearchDeleteBack() {
        if (!mBeanList.isEmpty()) mBeanList.clear();
        mBeanList.addAll(mSearchList);
    }

    public void openPopupWindow(View v) {
        //防止重复按按钮
        if (popupWindow != null && popupWindow.isShowing()) {
            return;
        }
        //设置PopupWindow的View
        View view = LayoutInflater.from(this).inflate(R.layout.view_clear_data, null);
        popupWindow = new PopupWindow(view, RelativeLayout.LayoutParams.MATCH_PARENT,
                RelativeLayout.LayoutParams.WRAP_CONTENT);
        //设置背景,这个没什么效果，不添加会报错
        popupWindow.setBackgroundDrawable(new BitmapDrawable());
        //设置点击弹窗外隐藏自身
        popupWindow.setFocusable(true);
        popupWindow.setOutsideTouchable(true);
        //设置动画
        popupWindow.setAnimationStyle(R.style.PopupWindow);
        //设置位置
        popupWindow.showAtLocation(v, Gravity.BOTTOM, 0, 20);
        //设置消失监听
        popupWindow.setOnDismissListener(this);
        //设置PopupWindow的View点击事件
        setOnPopupViewClick(view);
        //设置背景色
        setBackgroundAlpha(0.5f);
    }


    private TextView tv_cancel,tv_clear_data;

    private void setOnPopupViewClick(View view) {
        tv_cancel = (TextView) view.findViewById(R.id.tv_cancel);
        tv_clear_data = (TextView) view.findViewById(R.id.tv_clear_data);
        tv_clear_data.setText("清除已处理病历");
        tv_cancel.setOnClickListener(this);
        tv_clear_data.setOnClickListener(this);
    }

    //设置屏幕背景透明效果
    public void setBackgroundAlpha(float alpha) {
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.alpha = alpha;
        if (alpha == 1) {
            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);//不移除该Flag的话,在有视频的页面上的视频会出现黑屏的bug
        } else {
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);//此行代码主要是解决在华为手机上半透明效果无效的bug
        }
        getWindow().setAttributes(lp);
    }

    @Override
    public void onDismiss() {
        setBackgroundAlpha(1);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.tv_clear_data://TODO  做清除逻辑
                popupWindow.dismiss();
                mPresenter.removeNonAccepted();
                break;
            case R.id.tv_cancel:
                popupWindow.dismiss();
                break;
        }
    }
}
