package com.kaurihealth.kaurihealth.tinker;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Shengjie Sim Sun
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import android.annotation.TargetApi;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Build;
import android.support.multidex.MultiDex;

import com.avos.avoscloud.AVOSCloud;
import com.kaurihealth.chatlib.LCChatKit;
import com.kaurihealth.chatlib.cache.LeanchatUserProvider;
import com.kaurihealth.chatlib.utils.LCIMConstants;
import com.kaurihealth.kaurihealth.BuildConfig;
import com.kaurihealth.kaurihealth.CrashHandler;
import com.kaurihealth.kaurihealth.dagger.component.DaggerRepositoryComponent;
import com.kaurihealth.kaurihealth.dagger.component.RepositoryComponent;
import com.kaurihealth.kaurihealth.dagger.module.ApplicationModule;
import com.kaurihealth.kaurihealth.dagger.module.RepositoryModule;
import com.kaurihealth.kaurihealth.welcome_v.WelcomeActivity;
import com.kaurihealth.utilslib.SharedUtils;
import com.kaurihealth.utilslib.bugtag.BugTagUtils;
import com.kaurihealth.utilslib.constant.Global;
import com.kaurihealth.utilslib.log.LogUtils;
import com.tencent.tinker.anno.DefaultLifeCycle;
import com.tencent.tinker.app.TinkerManager;
import com.tencent.tinker.app.TinkerServerManager;
import com.tencent.tinker.lib.tinker.Tinker;
import com.tencent.tinker.loader.app.ApplicationLifeCycle;
import com.tencent.tinker.loader.app.DefaultApplicationLike;
import com.tencent.tinker.loader.shareutil.ShareConstants;

import butterknife.ButterKnife;


/**
 * because you can not use any other class in your application, we need to
 * move your implement of Application to {@link ApplicationLifeCycle}
 * As Application, all its direct reference class should be in the main dex.
 * <p>
 * We use tinker-android-anno to make sure all your classes can be patched.
 * <p>
 * application: if it is start with '.', we will add SampleApplicationLifeCycle's package name
 * <p>
 * flags:
 * TINKER_ENABLE_ALL: support dex, lib and resource
 * TINKER_DEX_MASK: just support dex
 * TINKER_NATIVE_LIBRARY_MASK: just support lib
 * TINKER_RESOURCE_MASK: just support resource
 * <p>
 * loaderClass: define the tinker loader class, we can just use the default TinkerLoader
 * <p>
 * loadVerifyFlag: whether check files' md5 on the load time, defualt it is false.
 * <p>
 * Created by zhangshaowen on 16/3/17.
 */
@SuppressWarnings("unused")
@DefaultLifeCycle(application = "com.kaurihealth.kaurihealth.SampleApplication",
        flags = ShareConstants.TINKER_ENABLE_ALL,
        loadVerifyFlag = false)
public class SampleApplicationLike extends DefaultApplicationLike {

    private static final String TAG = "Tinker.SampleApplicationLike";

    private RepositoryComponent mRepositoryComponent;
    private static SampleApplicationLike applicationLine;

    public SampleApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag,
                                 long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent,
                                 Resources[] resources, ClassLoader[] classLoader, AssetManager[] assetManager) {
        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent, resources, classLoader, assetManager);
    }

    /**
     * install multiDex before install tinker
     * so we don't need to put the tinker lib classes in the main dex
     */
    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
    @Override
    public void onBaseContextAttached(Context base) {
        super.onBaseContextAttached(base);
        //you must install multiDex whatever tinker is installed!
        MultiDex.install(base);

        //初始化Tinker
        TinkerManager.installTinker(this);
        //初始化TinkerPatch SDK
        TinkerServerManager.installTinkerServer(
                getApplication(), Tinker.with(getApplication()), 3,
                BuildConfig.APP_KEY, BuildConfig.APP_VERSION, "default"
        );
        //开始检查是否有补丁，这里配置的是每隔访问3小时服务器是否有更新。
        TinkerServerManager.checkTinkerUpdate(true);
        //其他初始化，请避免这样的调用getApplication().getApplicationContext()

        //dagger
        mRepositoryComponent = DaggerRepositoryComponent.builder()
                .applicationModule(new ApplicationModule(base))
                .repositoryModule(new RepositoryModule())
                .build();
        applicationLine = this;
        //环境
        initEnvironmentMode(base, getApplication());
    }

    public RepositoryComponent getComponent() {
        return mRepositoryComponent;
    }

    public static SampleApplicationLike getApp() {
        return applicationLine;
    }

    private void initEnvironmentMode(Context context, Application application) {
//聊天
        LCChatKit.getInstance().setProfileProvider(new LeanchatUserProvider());
//bugTag
        BugTagUtils.start(application, BuildConfig.Environment);
//log
        LogUtils.initLogUtils(BuildConfig.Environment);

        switch (BuildConfig.Environment) {
            case Global.Environment.DEVELOP:
                LCChatKit.getInstance().initKey(context, LCIMConstants.APP_ID_DEBUG, LCIMConstants.APP_KEY_DEBUG, WelcomeActivity.class);
                AVOSCloud.setDebugLogEnabled(true);
                SharedUtils.setString(context, Global.Environment.ENVIRONMENT, Global.Environment.DEVELOP);
//LeakCanary
//                LeakCanary.install(application);
//ButterKnife
                ButterKnife.setDebug(false);
//android查看真机中的数据库
//                Stetho.initializeWithDefaults(application);
                break;
            case Global.Environment.TEST:
                LCChatKit.getInstance().initKey(context, LCIMConstants.APP_ID_DEBUG, LCIMConstants.APP_KEY_DEBUG, WelcomeActivity.class);
                AVOSCloud.setDebugLogEnabled(true);
                SharedUtils.setString(context, Global.Environment.ENVIRONMENT, Global.Environment.TEST);
                break;
            case Global.Environment.PREVIEW:
                LCChatKit.getInstance().initKey(context, LCIMConstants.APP_ID_PREVIEW, LCIMConstants.APP_KEY_PREVIEW, WelcomeActivity.class);
                AVOSCloud.setDebugLogEnabled(false);
                SharedUtils.setString(context, Global.Environment.ENVIRONMENT, Global.Environment.PREVIEW);
                CrashHandler.getInstance().init(context);
                break;
            default:
                LCChatKit.getInstance().initKey(context, LCIMConstants.APP_ID_PREVIEW, LCIMConstants.APP_KEY_PREVIEW, WelcomeActivity.class);
                AVOSCloud.setDebugLogEnabled(false);
                SharedUtils.setString(context, Global.Environment.ENVIRONMENT, Global.Environment.PREVIEW);
                break;
        }
    }
}