package com.kaurihealth.mvplib.patient_p;

import com.kaurihealth.datalib.repository.IDataSource;
import com.kaurihealth.datalib.request_bean.bean.HealthConditionDisplayBean;
import com.kaurihealth.datalib.response_bean.DoctorPatientRelationshipBean;
import com.kaurihealth.datalib.response_bean.ResponseDisplayBean;

import java.util.List;

import javax.inject.Inject;

import rx.Subscriber;
import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Action1;
import rx.schedulers.Schedulers;
import rx.subscriptions.CompositeSubscription;

/**
 * Created by mip on 1/09/2016.
 */
public class HealthConditionPresenter<V> implements IHealthConditionPresenter<V> {

    private final IDataSource mRepository;
    private CompositeSubscription mSubscriptions;
    private IHealthConditionView mFragment;
    private boolean mFirstLoad = true;

    @Inject
    HealthConditionPresenter(IDataSource repository) {
        mRepository = repository;
        mSubscriptions = new CompositeSubscription();
    }

    @Override
    public void setPresenter(V view) {
        mFragment = (IHealthConditionView) view;
    }

    @Override
    public void onSubscribe() {
        if (mFirstLoad) loadingRemoteData(true);
    }

    @Override
    public void loadingRemoteData(boolean isDirty) {
        if (isDirty) {//刷新
            mRepository.manuallyRefresh();
        }
        LoadNewPatientRecordCountsByPatientId();
    }

    /**
     * 病理详情api
     */
    @Override
    public void LoadNewPatientRecordCountsByPatientId() {
        int patientId = mFragment.getCurrentPatientId();
        Subscription subscription = mRepository.LoadDoctorPatientRelationshipForDoctor()
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> mFragment.loadingIndicator(true))
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<List<DoctorPatientRelationshipBean>>() {
                    @Override
                    public void call(List<DoctorPatientRelationshipBean> beanList) {
                        relationshipBetweenTag(patientId, beanList);
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                        mFragment.showToast(throwable.getMessage());
                        mFragment.loadingIndicator(false);
                    }
                });
        mSubscriptions.add(subscription);
    }

    private void relationshipBetweenTag(int id, List<DoctorPatientRelationshipBean> beanList) {
        boolean isFriend = false;
        if (beanList != null) {
            for (DoctorPatientRelationshipBean doctorPatientRelationshipBean : beanList) {
                if (doctorPatientRelationshipBean.getPatient().getPatientId() == id) {
                    isFriend = true;
                    break;
                }
            }
        }
        mFragment.loadNewPatientRecordCountsByPatientId(isFriend);
        loadHealthConditionByPatientId();
    }

    /**
     * 通过患者ID查询健康状况信息 医生患者的token都可以用
     */
    @Override
    public void loadHealthConditionByPatientId() {
        int patientId = mFragment.getCurrentPatientId();
        Subscription subscription = mRepository.LoadHealthConditionByPatientId(patientId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<List<HealthConditionDisplayBean>>() {
                    @Override
                    public void onCompleted() {
                        mFragment.loadingIndicator(false);
                        mFirstLoad = false;
                    }

                    @Override
                    public void onError(Throwable e) {
                        mFragment.loadingIndicator(false);
                    }

                    @Override
                    public void onNext(List<HealthConditionDisplayBean> healthConditionDisplayBeen) {
                        mFragment.getHealthCondition(healthConditionDisplayBeen);
                    }
                });
        mSubscriptions.add(subscription);
    }

    /**
     * 更新的健康记录
     */
    @Override
    public void updataHealthRecord() {
        HealthConditionDisplayBean[] healthConditionDisplayBeen = mFragment.getCurrentUpdataArray();
        Subscription subscription = mRepository.UpdateHealthConditions(healthConditionDisplayBeen)
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> mFragment.dataInteractionDialog())
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<HealthConditionDisplayBean>() {
                    @Override
                    public void onCompleted() {
                        mFragment.dismissInteractionDialog();
                        mFragment.showToast("保存成功");
                    }

                    @Override
                    public void onError(Throwable e) {
                        mFragment.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(HealthConditionDisplayBean healthConditionDisplayBean) {
                        mFragment.getRequestReponse();    //删除健康记录
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    public void deleteHealthRecord() {
        Integer[] deleteArray = mFragment.getCurrentDeleteArray();
        Subscription subscription = mRepository.DeleteHealthConditions(deleteArray)
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(() -> mFragment.dataInteractionDialog())
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<ResponseDisplayBean>() {
                    @Override
                    public void onCompleted() {
                        mFragment.dismissInteractionDialog();
                    }

                    @Override
                    public void onError(Throwable e) {
                        mFragment.displayErrorDialog(e.getMessage());
                    }

                    @Override
                    public void onNext(ResponseDisplayBean responseDisplayBean) {
                        mFragment.getRequestReponse();
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    public void unSubscribe() {
        if (mFragment != null) mFragment.dismissInteractionDialog();
        mSubscriptions.clear();
        mFragment = null;
    }

}
