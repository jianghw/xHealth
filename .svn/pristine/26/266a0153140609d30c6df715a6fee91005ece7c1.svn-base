package com.kaurihealth.kaurihealth.main_v;

import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.util.Log;
import android.view.View;
import android.widget.GridView;
import android.widget.TextView;

import com.kaurihealth.chatlib.utils.LCIMConstants;
import com.kaurihealth.datalib.response_bean.DoctorPatientRelationshipBean;
import com.kaurihealth.datalib.response_bean.DoctorRelationshipBean;
import com.kaurihealth.kaurihealth.R;
import com.kaurihealth.kaurihealth.adapter.PatientDocRelAdapter;
import com.kaurihealth.kaurihealth.base_v.ChildBaseFragment;
import com.kaurihealth.kaurihealth.eventbus.PatientFragmentEvent;
import com.kaurihealth.kaurihealth.eventbus.PatientJumpEvent;
import com.kaurihealth.kaurihealth.patient_v.PatientInfoActivity;
import com.kaurihealth.kaurihealth.tinker.SampleApplicationLike;
import com.kaurihealth.mvplib.main_p.IPatientView;
import com.kaurihealth.mvplib.main_p.PatientPresenter;
import com.kaurihealth.utilslib.ColorUtils;
import com.kaurihealth.utilslib.constant.Global;
import com.kaurihealth.utilslib.widget.ScrollChildSwipeRefreshLayout;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.inject.Inject;

import butterknife.Bind;

/**
 * 患者信息
 */
public class PatientFragment extends ChildBaseFragment implements IPatientView {
    @Inject
    PatientPresenter<IPatientView> mPresenter;

    @Bind(R.id.gv_content)
    GridView mGvContent;
    @Bind(R.id.swipe_refresh)
    ScrollChildSwipeRefreshLayout mSwipeRefresh;
    @Bind(R.id.tv_note)
    TextView tvNote;

    private List<DoctorPatientRelationshipBean> mBeanList;
    private PatientDocRelAdapter adapter;

    public static PatientFragment newInstance() {
        return new PatientFragment();
    }

    @Override
    protected int getFragmentLayoutID() {
        return R.layout.fragment_patient;
    }

    @Override
    protected void initPresenterAndView(Bundle savedInstanceState) {
        SampleApplicationLike.getApp().getComponent().inject(this);
        mPresenter.setPresenter(this);

        mBeanList = new ArrayList<>();
        adapter = new PatientDocRelAdapter(getContext(), mBeanList);
        mGvContent.setAdapter(adapter);
    }

    @Override
    protected void initDelayedData() {
        mSwipeRefresh.setColorSchemeColors(
                ColorUtils.setSwipeRefreshColors(getContext())
        );
        mSwipeRefresh.setScrollUpChild(mGvContent);
        mSwipeRefresh.setSize(SwipeRefreshLayout.DEFAULT);
        mSwipeRefresh.setDistanceToTriggerSync(Global.Numerical.SWIPE_REFRESH);
        mSwipeRefresh.setOnRefreshListener(() -> mPresenter.loadingRemoteData(true));
        //注册事件
        EventBus.getDefault().register(this);
    }

    @Override
    protected void childLazyLoadingData() {
        mGvContent.setSelection(0);
        mPresenter.onSubscribe();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        mPresenter.unSubscribe();
        if (mBeanList != null) mBeanList.clear();
        removeStickyEvent(PatientJumpEvent.class);
        removeStickyEvent(PatientFragmentEvent.class);
        EventBus.getDefault().unregister(this);
    }

    @Override
    public void onResume() {
        super.onResume();
    }

    @Override
    public void switchPageUI(String className) {
        switch (className) {
            case Global.Jump.PatientInfoActivity:
                skipTo(PatientInfoActivity.class);
                break;
            default:
                break;
        }
    }

    @Override
    public void lazyLoadingDataSuccess(List<?> list) {
        tvNote.setVisibility(list != null ? !list.isEmpty() ? View.GONE : View.VISIBLE : View.VISIBLE);

        if (!mBeanList.isEmpty()) mBeanList.clear();
        if (list != null) {
            mBeanList.addAll((Collection<? extends DoctorPatientRelationshipBean>) list);
        }
        adapter.notifyDataSetChanged();
    }

    @Override
    public void manualSearchSucceed(List<DoctorRelationshipBean> list) {

    }

    /**
     * ----------------------------订阅事件----------------------------------
     * <p>
     * #@Subscribe 下的方法必须为public
     * postSticky()发送的粘性消息订阅时必须@Subscribe(sticky = true)否则接收不到
     * 发送的event事件是object类
     * #@Subscribe(priority = 1) 使用时优先级默认为0，然后只有统一模式下设置优先级才有效果，自己看着合理使用
     **/
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void eventBusMain(PatientJumpEvent event) {
        switchPageUI(event.getMessage());
        if (!event.getKauriHealthId().equals("0")) {
            try {
                Intent intent = new Intent();
                intent.setPackage(getContext().getPackageName());
                intent.setAction(LCIMConstants.CONVERSATION_ITEM_CLICK_ACTION);
                intent.addCategory(Intent.CATEGORY_DEFAULT);
                intent.putExtra(LCIMConstants.PEER_ID, event.getKauriHealthId());
                getContext().startActivity(intent);
            } catch (ActivityNotFoundException exception) {
                Log.i(LCIMConstants.LCIM_LOG_TAG, exception.toString());
            }
        }
    }

    /**
     * 刷新
     */
    @Subscribe(threadMode = ThreadMode.MAIN, sticky = true)
    public void eventBusMain(PatientFragmentEvent event) {
        mPresenter.loadingRemoteData(true);
    }

}
