package com.kaurihealth.kaurihealth.patient_v.health_condition;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.util.ArrayMap;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.kaurihealth.datalib.request_bean.bean.HealthConditionDisplayBean;
import com.kaurihealth.datalib.response_bean.DoctorPatientRelationshipBean;
import com.kaurihealth.kaurihealth.R;
import com.kaurihealth.kaurihealth.base_v.BaseActivity;
import com.kaurihealth.kaurihealth.eventbus.HealthConditionBeanEvent;
import com.kaurihealth.kaurihealth.tinker.SampleApplicationLike;
import com.kaurihealth.mvplib.patient_p.HealthConditionPresenter;
import com.kaurihealth.mvplib.patient_p.IHealthConditionView;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import butterknife.Bind;
import butterknife.OnClick;
import cn.pedant.SweetAlert.SweetAlertDialog;

/**
 * 健康记录   mip
 */
public class HealthConditionActivity extends BaseActivity implements IHealthConditionView {
    @Inject
    HealthConditionPresenter<IHealthConditionView> mPresenter;

    @Bind(R.id.layContainer)
    LinearLayout layContainer;
    @Bind(R.id.tv_operate)
    TextView tvStore;

    private int patientId;
    private final int count = 7;
    public static final String Key = "data";
    private final int Add = 1;
    private final int Edit = 2;
    private HealthyRecordHabitNewBean healthyRecordHabitNewBean;
    private IHealthyRecordHabit<HealthConditionDisplayBean> menstrualReproductive;
    private IHealthyRecordHabit<HealthConditionDisplayBean> habitInterface;

    Map<Integer, HealthyRecordInterface> map = new ArrayMap<>();

    private boolean isAble;
    private HealthConditionDisplayBean[] updataArray;
    private Integer[] deleteArray;
    private int times;

    @Override
    protected int getActivityLayoutID() {
        return R.layout.activity_health_condition;
    }

    @Override
    protected void initPresenterAndView(Bundle savedInstanceState) {
        SampleApplicationLike.getApp().getComponent().inject(this);
        mPresenter.setPresenter(this);
    }

    @Override
    protected void initDelayedData() {
        initBackBtn(R.id.iv_back);
        //注册事件
        EventBus.getDefault().register(this);
    }

    /**
     * ```````````````订阅事件```````````````
     **/
    @Subscribe(threadMode = ThreadMode.MAIN, sticky = true)
    public void eventBusMain(HealthConditionBeanEvent event) {   //健康记录事件
        DoctorPatientRelationshipBean doctorPatientRelationshipBean = event.getBean();
        boolean isAble = event.getIsAble();
        if (doctorPatientRelationshipBean == null) return;
        this.isAble = isAble;

        initDate(doctorPatientRelationshipBean);
    }


    private void initDate(DoctorPatientRelationshipBean doctorPatientRelationshipBean) {
        patientId = doctorPatientRelationshipBean.getPatientId();
        offCurActivity(isAble);

        Mode mode = isAble ? Mode.EditAndRead : Mode.ReadOnly;

        Context context = getApplicationContext();
        IHealthyRecordNewActivity bean = getHealthyRecordNewActivityInterface();

        HealthyRecordNormalNewBean mainHealthyProblemBean = new HealthyRecordNormalNewBean(0, context, "目前主要健康问题", bean, patientId, mode);
        layContainer.addView(mainHealthyProblemBean.getParent());
        map.put(0, mainHealthyProblemBean.getHealthyRecordInterface());

        HealthyRecordNormalNewBean previousIlnessProblemBean = new HealthyRecordNormalNewBean(1, context, "既往疾病与健康问题", bean, patientId, mode);
        layContainer.addView(previousIlnessProblemBean.getParent());
        map.put(1, previousIlnessProblemBean.getHealthyRecordInterface());

        HealthyRecordNormalNewBean currentDrugProblemBean = new HealthyRecordNormalNewBean(2, context, "目前应用药物", bean, patientId, mode);
        layContainer.addView(currentDrugProblemBean.getParent());
        map.put(2, currentDrugProblemBean.getHealthyRecordInterface());

        HealthyRecordNormalNewBean allergyHistoryBean = new HealthyRecordNormalNewBean(3, context, "药物及其它过敏史", bean, patientId, mode);
        layContainer.addView(allergyHistoryBean.getParent());
        map.put(3, allergyHistoryBean.getHealthyRecordInterface());

        HealthyRecordNormalNewBean otherThreatmentBean = new HealthyRecordNormalNewBean(4, context, "既往手术或其它既往治疗", bean, patientId, mode);
        layContainer.addView(otherThreatmentBean.getParent());
        map.put(4, otherThreatmentBean.getHealthyRecordInterface());

        HealthyRecordNormalNewBean familyHistoryBean = new HealthyRecordNormalNewBean(5, context, "家族病史", bean, patientId, mode);
        layContainer.addView(familyHistoryBean.getParent());
        map.put(5, familyHistoryBean.getHealthyRecordInterface());

        HealthyRecordNormalNewBean precautionBean = new HealthyRecordNormalNewBean(6, context, "预防接种史", bean, patientId, mode);
        layContainer.addView(precautionBean.getParent());
        map.put(6, precautionBean.getHealthyRecordInterface());

        for (int i = 0; i < count; i++) {
            map.get(i).setListRes();
        }
        //个人习惯
        healthyRecordHabitNewBean = new HealthyRecordHabitNewBean(this, patientId, mode);
        habitInterface = healthyRecordHabitNewBean.getHealthyRecordHabitInterface();
        layContainer.addView(habitInterface.getView());
        //月经
        if (patientId != -1) {
            String gender = doctorPatientRelationshipBean.getPatient().getGender();
            if (gender != null && gender.equals("女")) {
                HealthyRecordNewMenstrualReproductive healthyRecordNewMenstrualReproductive = new HealthyRecordNewMenstrualReproductive(patientId, mode, this);
                menstrualReproductive = healthyRecordNewMenstrualReproductive.getHealthyRecordHabitInterface();
                layContainer.addView(menstrualReproductive.getView());
            }
        }
        //得到健康记录信息
        mPresenter.onSubscribe();
    }

    /**
     * 设置当前界面为不可编辑状态
     */
    private void offCurActivity(boolean isAble) {
        tvStore.setVisibility(isAble ? View.VISIBLE : View.GONE);
    }

    /**
     * ·············点击事件··············
     **/
    @OnClick({R.id.tv_operate})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.tv_operate:
                SweetAlertDialog commitDataDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
                        .setTitleText("提示")
                        .setContentText("确定修改吗?")
                        .setConfirmText("确定")
                        .setConfirmClickListener(sweetAlertDialog -> yeladey())  //延时处理
                        .setCancelText("取消")
                        .setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {
                            @Override
                            public void onClick(SweetAlertDialog sweetAlertDialog) {    //对话框选择"确定"/"取消"之后调用
                                sweetAlertDialog.dismiss();
                                //showToast("保存成功");
                                finish();
                            }
                        });
                commitDataDialog.show();
                break;
            default:
                break;
        }
    }

    private long mExitTime;

    //延时处理
    private void yeladey() {
        if ((System.currentTimeMillis() - mExitTime) > 2000) {
            updataHealthRecord();//更新健康记录
            mExitTime = System.currentTimeMillis();
        }
    }

    /**
     * 更新健康记录   后台有误
     */
    private void updataHealthRecord() {
        List<HealthConditionDisplayBean> updataList = new LinkedList<>();
        for (int i = 0; i < count; i++) {
            HealthyRecordInterface iHealthyRecord = map.get(i);
            if (iHealthyRecord.getAll() != null) {
                updataList.addAll(iHealthyRecord.getAll());
            }
        }
        updataList.addAll(healthyRecordHabitNewBean.getHealthyRecordHabitInterface().getAll());
        if (menstrualReproductive != null) {
            updataList.addAll(menstrualReproductive.getAll());
        }
        Iterator<HealthConditionDisplayBean> iterator = updataList.iterator();
        while (iterator.hasNext()) {
            if (iterator.next() == null) {
                iterator.remove();
            }
        }
        updataArray = updataList.toArray(new HealthConditionDisplayBean[updataList.size()]);
        mPresenter.updataHealthRecord();
    }


    /**
     * 删除健康记录
     */
    private void deleteHealthRecord() {
        final List<HealthConditionDisplayBean> deleteList = new LinkedList<>();
        for (int i = 0; i < count; i++) {
            HealthyRecordInterface iHealthyRecord = map.get(i);
            if (iHealthyRecord.getListNeedToDelete() != null) {
                deleteList.addAll(iHealthyRecord.getListNeedToDelete());
            }
        }
        List<Integer> listDelete = new ArrayList();
        for (HealthConditionDisplayBean iteam : deleteList) {
            listDelete.add(iteam.healthConditionId);
        }
        deleteArray = listDelete.toArray(new Integer[listDelete.size()]);
        mPresenter.deleteHealthRecord();
    }

    /**
     * 健康记录的接口
     *
     * @return
     */
    private IHealthyRecordNewActivity getHealthyRecordNewActivityInterface() {
        IHealthyRecordNewActivity bean = new IHealthyRecordNewActivity() {
            @Override
            public void add(int id, String txtName) {
                HealthyRecordNewActivityBean bean1 = new HealthyRecordNewActivityBean(id, EditAddMode.Add, txtName);
                Bundle bundle = new Bundle();
                bundle.putSerializable(Key, bean1);
                skipToForResult(AddHealothyRecordActivity.class, bundle, Add);
            }

            @Override
            public void edit(int id, int position, String txtName) {
                HealthyRecordNewActivityBean bean1 = new HealthyRecordNewActivityBean(id, EditAddMode.Edit, txtName);
                bean1.setValue(((HealthConditionDisplayBean) (map.get(id).getValueAt(position))).detail);
                bean1.setIndex(position);
                Bundle bundle = new Bundle();
                bundle.putSerializable(Key, bean1);
                skipToForResult(AddHealothyRecordActivity.class, bundle, Edit);
            }
        };
        return bean;
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (!map.isEmpty()) map.clear();
        mPresenter.unSubscribe();
        //注销事件
        EventBus.getDefault().unregister(this);
    }

    /**
     * ----------------------------继承基础mvpView方法-----------------------------------
     *
     * @param className
     */

    @Override
    public void switchPageUI(String className) {
    }

    /**
     * 得到当前的patientId
     *
     * @return
     */
    @Override
    public int getCurrentPatientId() {
        return patientId;
    }

    /**
     * 收到返回的健康记录信息
     *
     * @param healthConditionDisplayBeen
     */
    @Override
    public void getHealthCondition(List<HealthConditionDisplayBean> healthConditionDisplayBeen) {
        if (healthConditionDisplayBeen == null) return;
        distributeData(healthConditionDisplayBeen);
    }

    /**
     * 分发数据
     */
    private void distributeData(List<HealthConditionDisplayBean> healthConditionDisplayBeen) {
        for (HealthConditionDisplayBean item : healthConditionDisplayBeen) {
            for (int i = 0; i < count; i++) {
                HealthyRecordInterface healthyRecordInterface = map.get(i);
                if (healthyRecordInterface == null) return;
                if (healthyRecordInterface.isThisType(item)) {
                    healthyRecordInterface.add(item);
                    break;
                }
            }
            if (habitInterface.isThisType(item)) {
                habitInterface.add(item);
                continue;
            }
            if (menstrualReproductive != null) {
                if (menstrualReproductive.isThisType(item)) {
                    menstrualReproductive.add(item);
                }
            }
        }
    }

    /**
     * 得到当前更新的数组
     */
    @Override
    public HealthConditionDisplayBean[] getCurrentUpdataArray() {
        if (updataArray == null) {
            throw new IllegalStateException("updataArray must be not null");
        }
        return updataArray;
    }

    /**
     * 得到当前删除数组
     */
    @Override
    public Integer[] getCurrentDeleteArray() {
        if (deleteArray == null) {
            throw new IllegalStateException("deleteArray must be not null");
        }
        return deleteArray;
    }

    /**
     * 得到请求返回,判断更新跟删除是否完成
     */
    @Override
    public void getRequestReponse() {
//        deleteHealthRecord();//删除健康记录
//        times++;
//        if (times == 2) {
//            times = 0;
//            finishCur();
//        }
    }

    /**
     * 数据返回
     *
     * @param requestCode
     * @param resultCode
     * @param data
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case Add:
                if (resultCode == RESULT_OK) {
                    HealthyRecordNewActivityBean serializableBean = (HealthyRecordNewActivityBean) data.getExtras().getSerializable(Key);
                    setData(serializableBean);
                }
                break;
            case Edit:
                if (resultCode == RESULT_OK) {
                    HealthyRecordNewActivityBean serializableBean = (HealthyRecordNewActivityBean) data.getExtras().getSerializable(Key);
                    setData(serializableBean);
                }
                break;
        }
    }

    /**
     * 将添加操作或编辑操作获取到的数据，加载到界面中
     *
     * @param bean
     */
    private void setData(HealthyRecordNewActivityBean bean) {
        switch (bean.getMode()) {
            case Edit:
                int id = bean.getId();
                int index = bean.getIndex();
                String value = bean.getValue();
                map.get(id).edit(index, value);
                break;
            case Add:
                int idAdd = bean.getId();
                String valueAdd = bean.getValue();
                map.get(idAdd).addNewOne(valueAdd);
                break;
        }
    }


    /**
     * Created by 张磊 on 2016/4/28.
     * 介绍：
     */
    public enum EditAddMode {
        Add, Edit
    }
}
